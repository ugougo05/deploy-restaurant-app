name: CI / CD Pipeline
run-name: ${{ github.actor }} is Deploying 

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_type == 'tag' && github.ref_name || github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push auth
        uses: docker/build-push-action@v6
        with:
          context: ./backend/auth
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/auth:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/auth:latest
            
      - name: Build and push discounts
        uses: docker/build-push-action@v6
        with:
          context: ./backend/discounts
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/discounts:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/discounts:latest

      - name: Build and push items
        uses: docker/build-push-action@v6
        with:
          context: ./backend/items
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/items:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/items:latest

      - name: Build and push client
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/client:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/client:latest

      - name: Configure AKS Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5  

      
      - name: Terraform Init
        run: terraform init
        working-directory: terraform/ 

    
      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/

      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "AKS_RG=$(terraform -chdir=terraform output -raw aks_resource_group)" >> $GITHUB_ENV
          echo "AKS_CLUSTER=$(terraform -chdir=terraform output -raw aks_cluster_name)" >> $GITHUB_ENV

      - name: Set AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group $AKS_RG \
            --name $AKS_CLUSTER \
            --admin \ 

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic db-credentials \
            --from-literal=MONGODB_URI=${{ secrets.MONGODB_URI }} \
            --from-literal=CLOUD_NAME=${{ secrets.CLOUD_NAME }} \
            --from-literal=CLOUD_API_KEY=${{ secrets.CLOUD_API_KEY }} \
            --from-literal=CLOUD_API_SECRET=${{ secrets.CLOUD_API_SECRET }} \
            --from-literal=SECRET=${{ secrets.SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/

      - name: Restart Deployments to Pull Latest Image 
        run: |
          kubectl rollout restart deployment/auth-deployment -n default
          kubectl rollout restart deployment/discounts-deployment -n default
          kubectl rollout restart deployment/items-deployment -n default
          kubectl rollout restart deployment/client-deployment -n default